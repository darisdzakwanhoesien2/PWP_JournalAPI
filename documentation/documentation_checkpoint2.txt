PWP Courses: https://lovelace.oulu.fi/ohjelmoitava-web/pwp-spring-2025/ 

Here is our state diagram
stateDiagram-v2
    [*] --> UsersCollection: "GET /users"
    UsersCollection --> UserItem: "POST /users/register - _links self /users/{id}"
    UsersCollection --> UserItem: "GET /users/{id} - _links self /users/{id}, entries /users/{id}/entries"
    UserItem --> EntriesCollection: "GET /users/{id}/entries - _links self /users/{id}/entries, user /users/{id}"
    UserItem --> UserItem: "PUT /users/{id} - Update user - _links self /users/{id}"
    UserItem --> UserItem: "DELETE /users/{id} - Delete user"
    UserItem --> [*]: "User deleted"
    EntriesCollection --> EntryItem: "POST /entries - _links self /entries/{id}"
    EntriesCollection --> EntryItem: "GET /entries/{id} - _links self /entries/{id}, comments /entries/{id}/comments, user /users/{id}"
    EntriesCollection --> EntriesCollection: "GET /entries - List all entries - _links self /entries, user /users/{id}"
    EntryItem --> EntryItem: "PUT /entries/{id} - Update entry - _links self /entries/{id}"
    EntryItem --> EntryItem: "DELETE /entries/{id} - Delete entry"
    EntryItem --> CommentsCollection: "GET /entries/{id}/comments - _links self /entries/{id}/comments, entry /entries/{id}"
    EntryItem --> EditHistoryCollection: "GET /entries/{id}/edit_history - _links self /entries/{id}/edit_history, entry /entries/{id}"
    CommentsCollection --> CommentItem: "POST /entries/{id}/comments - _links self /comments/{comment_id}"
    CommentsCollection --> CommentItem: "GET /comments/{comment_id} - _links self /comments/{comment_id}, entry /entries/{id}"
    CommentsCollection --> CommentsCollection: "GET /entries/{id}/comments - List comments - _links self /entries/{id}/comments"
    CommentItem --> CommentItem: "PUT /comments/{comment_id} - Update comment - _links self /comments/{comment_id}"
    CommentItem --> CommentItem: "DELETE /comments/{comment_id} - Delete comment"
    CommentItem --> [*]: "Comment deleted"
    EditHistoryCollection --> EditHistoryItem: "GET /entries/{id}/edit_history/{edit_id} - _links self /entries/{id}/edit_history/{edit_id}, entry /entries/{id}"
    EditHistoryCollection --> EditHistoryCollection: "GET /entries/{id}/edit_history - List edit history - _links self /entries/{id}/edit_history"
    EditHistoryItem --> [*]: "View only"
    EntryItem --> [*]: "Entry deleted"


Important information for Deadline 2 https://github.com/programmable-web-project-unioulu/PWP/wiki/Database
‚ÄºÔ∏è  This chapter should be completed by Deadline 2 (see course information at Lovelace)

üìë  Chapter summary
In this section students must design and implement the database structure (mainly the data model).
In this section you must implement:

The database table structure.
The data models (ORM)
Data models access methods (if needed)
Populating the database using the models you have created
In this section you should aim for a high quality small implementation instead of implementing a lot of features containing bugs and lack of proper documentation.
SECTION GOALS:
Understand database basics
Understand how to use ORM to create database schema and populate a database
Setup and configure database
Implement database backend
‚úîÔ∏è     Chapter evaluation (max 5 points)
You can get a maximum of 5 points after completing this section. More detailed evaluation is provided in the evaluation sheet in Lovelace.
Database design and implementation
Database design
üìë  Content that must be included in the section
Describe your database. The documentation must include:
A name and a short description of each database model. Describe in one or two sentences what the model represents.
An enumeration of the attributes (columns) of each model. Each attribute must include:
Its type and restrictions (values that can take)
A short description of the attribute whenever the name is not explicit enough. E.g. If you are describing the users of a "forum", it is not necessary to explain the attributes "name", "surname" or "address"
because their meanings are obvious.
Characteristics of this attribute (e.g. if it is unique, if it contains default values)
Connection with other models (primary keys and foreign keys)
Other keys
You can use the table skeleton provided below
For this section you can use a visual tool to generate a diagram. Be sure that the digram contains all the information provided in the models. Some tools you can use include: https://dbdesigner.net/, https://www.lucidchart.com/pages/tour/ER_diagram_tool, https://dbdiffo.com/

‚úèÔ∏è The table can have the following structure

Name	Type	Restrictions	Description	Characteristics	Links
Name of the attribute	Attribute type	Values that the type can take	Description of the attribute	Uniquenes, default...	keys and foreign keys
‚úèÔ∏è Do not forget to include a diagram presenting the relations

Database implementation
üíª     TODO: SOFTWARE TO DELIVER IN THIS SECTION
The code repository must contain:
The ORM models and functions
A .sql dump (or similar data structure) of a database or the .db file (if you are using SQlite). The provided document must contain enough information to replicate your database. You must provide a populated database in order to test your models.
The scripts used to generate your database (if any)
A README.md file containing:
All dependencies (external libraries) and how to install them
Define database (MySQL, SQLite, MariaDB, MongoDB...) and version utilized
Instructions how to setup the database framework and external libraries you might have used, or a link where it is clearly explained.
Instructions on how to setup and populate the database.
If you are using python a `requirements.txt` with the dependencies

		points	details https://lovelace.oulu.fi/ohjelmoitava-web/ohjelmoitava-web/pwp-deliverable-2/
1. Database Design	2.0	
	Database Tables	1.0	Each database table is included here. For each database column, all relevant fields are filled correctly. Good choices have been made regarding types and restrictions.
	Database Diagram	1.0	Diagram exists, and contains all tables. For each table, all relations are shown in the diagram, and their type is clear.
2. Database Models	2.0	
	Models Match Design	1.0	All models are included in the implementation, and they match the tables in the project wiki. This includes using correct column types, and setting restrictions where needed (even though SQLite might not support them).
	Relationships	1.0	Relationships are set correctly for each model, and mach the foreign key relations shown in the diagram. ONDELETE behavior has been set explicitly for each relation, and is implemented correctly.
3. Readme	1.0	
	Dependency Information	0.5	The readme file contains list of project dependencies or a requirements file is provided. It also indicates which database is used and/or list of supported databases.
	Instructions	0.5	The readme contains instructions about how to setup the database, and how to populate it to see that instances of all models can be created. You can provide a setup + population script file instead of writing instructions (just instruct the reader how to run it).
Put your link here 
Enter your answer here

 You have already answered this task correctly.